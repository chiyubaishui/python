4. ORM

import pymysql
pymysql.connect(
 ...
 ...
)

1. 不同的程序员写的SQL水平参差不齐
2. 执行效率也参差不齐

python语法   --自动翻译-->  SQL语句
ORM: 
	优点:
		1. 简单,不用自己写SQL语句
		2. 开发效率高
	缺点:
		1. 记忆你这个特殊的语法
		2. 相对于大神些的SQL语句,肯定执行效率有差距
	
ORM的对应关系:
	类          --->      数据表
	对象        --->      数据行
	属性        --->      字段

ORM能做的事儿:
	1. 操作数据表    --> 创建表/删除表/修改表
		操作models.py里面的类
	
	2. 操作数据行    --> 数据的增删改查
		
	
	不能创建数据库,自己动手创建数据库
	
使用Django的ORM详细步骤:
	1. 自己动手创建数据库
		create database 数据库名;
	2. 在Django项目中设置连接数据库的相关配置(告诉Django连接哪一个数据库)
		# 数据库相关的配置
		DATABASES = {
			'default': {
				'ENGINE': 'django.db.backends.mysql',  # 连接的数据库类型
				'HOST': '127.0.0.1',  # 连接数据库的地址
				'PORT': 3306,  # 端口
				'NAME': "day61",  # 数据库名称
				'USER': 'root',  # 用户
				'PASSWORD': '123456'  # 密码
			}
		}
	3. 告诉Django用pymysql代替默认的MySQLDB 连接MySQL数据库
		在项目/__init__.py文件中,写下面两句:
			import pymysql
			# 告诉Django用pymysql来代替默认的MySQLdb
			pymysql.install_as_MySQLdb()
	4. 在app下面的models.py文件中定义一个类,这个类必须继承models.Model
		class 类名(models.Model):
			...
	5. 执行两个命令
		1. python3 manage.py makemigrations
		2. python3 manage.py migrate

常用字段
AutoField
int自增列，必须填入参数 primary_key=True。当model中如果没有自增列，则自动会创建一个列名为id的列。

IntegerField
一个整数类型,范围在 -2147483648 to 2147483647。

CharField
字符类型，必须提供max_length参数， max_length表示字符长度。

DateField
日期字段，日期格式  YYYY-MM-DD，相当于Python中的datetime.date()实例。

DateTimeField
日期时间字段，格式 YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]，相当于Python中的datetime.datetime()实例。
		
AutoField(Field)
        - int自增列，必须填入参数 primary_key=True

    BigAutoField(AutoField)
        - bigint自增列，必须填入参数 primary_key=True

        注：当model中如果没有自增列，则自动会创建一个列名为id的列
        from django.db import models

        class UserInfo(models.Model):
            # 自动创建一个列名为id的且为自增的整数列
            username = models.CharField(max_length=32)

        class Group(models.Model):
            # 自定义自增列
            nid = models.AutoField(primary_key=True)
            name = models.CharField(max_length=32)

    SmallIntegerField(IntegerField):
        - 小整数 -32768 ～ 32767

    PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)
        - 正小整数 0 ～ 32767
    IntegerField(Field)
        - 整数列(有符号的) -2147483648 ～ 2147483647

    PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)
        - 正整数 0 ～ 2147483647

    BigIntegerField(IntegerField):
        - 长整型(有符号的) -9223372036854775808 ～ 9223372036854775807

    BooleanField(Field)
        - 布尔值类型

    NullBooleanField(Field):
        - 可以为空的布尔值

    CharField(Field)
        - 字符类型
        - 必须提供max_length参数， max_length表示字符长度

    TextField(Field)
        - 文本类型

    EmailField(CharField)：
        - 字符串类型，Django Admin以及ModelForm中提供验证机制

    IPAddressField(Field)
        - 字符串类型，Django Admin以及ModelForm中提供验证 IPV4 机制

    GenericIPAddressField(Field)
        - 字符串类型，Django Admin以及ModelForm中提供验证 Ipv4和Ipv6
        - 参数：
            protocol，用于指定Ipv4或Ipv6， 'both',"ipv4","ipv6"
            unpack_ipv4， 如果指定为True，则输入::ffff:192.0.2.1时候，可解析为192.0.2.1，开启此功能，需要protocol="both"

    URLField(CharField)
        - 字符串类型，Django Admin以及ModelForm中提供验证 URL

    SlugField(CharField)
        - 字符串类型，Django Admin以及ModelForm中提供验证支持 字母、数字、下划线、连接符（减号）

    CommaSeparatedIntegerField(CharField)
        - 字符串类型，格式必须为逗号分割的数字

    UUIDField(Field)
        - 字符串类型，Django Admin以及ModelForm中提供对UUID格式的验证

    FilePathField(Field)
        - 字符串，Django Admin以及ModelForm中提供读取文件夹下文件的功能
        - 参数：
                path,                      文件夹路径
                match=None,                正则匹配
                recursive=False,           递归下面的文件夹
                allow_files=True,          允许文件
                allow_folders=False,       允许文件夹

    FileField(Field)
        - 字符串，路径保存在数据库，文件上传到指定目录
        - 参数：
            upload_to = ""      上传文件的保存路径
            storage = None      存储组件，默认django.core.files.storage.FileSystemStorage

    ImageField(FileField)
        - 字符串，路径保存在数据库，文件上传到指定目录
        - 参数：
            upload_to = ""      上传文件的保存路径
            storage = None      存储组件，默认django.core.files.storage.FileSystemStorage
            width_field=None,   上传图片的高度保存的数据库字段名（字符串）
            height_field=None   上传图片的宽度保存的数据库字段名（字符串）

    DateTimeField(DateField)
        - 日期+时间格式 YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]

    DateField(DateTimeCheckMixin, Field)
        - 日期格式      YYYY-MM-DD

    TimeField(DateTimeCheckMixin, Field)
        - 时间格式      HH:MM[:ss[.uuuuuu]]

    DurationField(Field)
        - 长整数，时间间隔，数据库中按照bigint存储，ORM中获取的值为datetime.timedelta类型

    FloatField(Field)
        - 浮点型

    DecimalField(Field)
        - 10进制小数
        - 参数：
            max_digits，小数总长度
            decimal_places，小数位长度

    BinaryField(Field)
        - 二进制类型

自定义字段
	class FixedCharField(models.Field):
    """
    自定义的char类型的字段类
    """
    def __init__(self, max_length, *args, **kwargs):
        super().__init__(max_length=max_length, *args, **kwargs)
        self.length = max_length

    def db_type(self, connection):
        """
        限定生成数据库表的字段类型为char，长度为length指定的值
        """
        return 'char(%s)' % self.length


class Class(models.Model):
    id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=25)
    # 使用上面自定义的char类型的字段
    cname = FixedCharField(max_length=25)	
		
字段参数
null
用于表示某个字段可以为空。

unique
如果设置为unique=True 则该字段在此表中必须是唯一的 。

db_index
如果db_index=True 则代表着为此字段设置数据库索引。

default
为该字段设置默认值。		

时间字段独有
DatetimeField、DateField、TimeField这个三个时间字段，都可以设置如下属性。

auto_now_add
配置auto_now_add=True，创建数据记录的时候会把当前时间添加到数据库。

auto_now
配置上auto_now=True，每次更新数据记录的时候会更新该字段。		
		
ORM单表的增加和查询:
	1. 查询（from app01 import models）
		models.UserInfo.objects.all()
		
	2. 增加
		models.UserInfo.objects.create(name="张三")
		
publisher = models.ForeignKey(to="Publisher")

 {% for i in all_book %}
        <tr>
        <td>{{ i.id }}</td>
        <td>{{ i.title }}</td>
        <td>{{ i.publisher.name }}</td>  #其中i.publisher是一个对象
        #<td>{{ i.publisher_id }}</td>  #其中i.publisher_id是一个数字，对应的是数据库中表的字段中保存的外键值
        <td>
            <a href="/delete_book/?id={{ i.id }}">删除</a>
            <a href="/edit_book/?id={{ i.id }}">编辑</a>
        </td>
        </tr>
    {% endfor %}
