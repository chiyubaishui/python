相当于我们使用related代替了在通过一个对象查询出多个对象集合时，使用表名_set来获取
我先定义两个模型，一个是作者，一个是作者出版的书籍，算是一对多的类型。

class Person(models.Model);
    name = models.CharField(verbose_name='作者姓名', max_length=10)
    age = models.IntegerField(verbose_name='作者年龄')


class Book(models.Model):
    person = models.ForeignKey(Person, related_name='person_book')
    title = models.CharField(verbose_name='书籍名称', max_length=10)
    pubtime = models.DateField(verbose_name='出版时间')


如果我们要查询一个作者出版了哪些书籍的话，那我们要怎么做呢？
即通过一查询出多的那方面

先查询到作者的信息
person = Person.objects.fiter(你的条件)
返回一个person对象

接下来就查询person关联的所有书籍对象，我们在前面讲过的使用基于对象的查询方式,反向查询按照表名
book = person.book_set.all()
django 默认每个主表的对象都有一个是外键的属性，可以通过它来查询到所有属于主表的子表的信息。
这个属性的名称默认是以子表的名称小写加上_set()来表示，默认返回的是一个querydict对象，你可以继续的根据情况来查询等操作。

在实际项目中，我们使用最多的还是related_name
如果你觉得上面的定义比较麻烦的话，你也可以在定义主表的外键的时候，给这个外键定义好一个名称。要用related_name比如在Book表中：
  person = models.ForeignKey(Person, related_name='person_books')
那么实现上面的需求，可以使用person.book_set.all()
也可以使用person.person_books.all()