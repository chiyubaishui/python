1.1 django起步
1.1.1 Django简介
优点：简单，开发速度快，安全，
1.1.2 安装Django（linux）
	安装指定版本：sudo pip install Django==1.10.1
	查看版本：import django
	                  print(django.get_version())
	源码安装：git clone https://github.com/django/django.git
		           sudo pip install -e ./django

1.1.3 创建项目(project)
	创建一个mysite项目：cd /data/mysite && django-admin startproject mysite
	或者：django-admin startppoject mysite .  （有__init__.py文件）
	启动项目：python manage.py runserver (可以通过http://127.0.0.1:8000/访问)
			  python3 manage.py runserver 0.0.0.0:8000（指定ip地址和端口）

1.1.4 创建应用(application)
	python manage. py startapp blog 
	目录和文件说明：
	1. manage.py  在创建一个Django 项目后， manage.py被自动生成在项目的根目录中，它是对django-admin.py的简单封装，同样能够实现命令行操作。
	2. mysite mysite 是所建项目的管理功能目录，这个目录的名称因用户所创建的项目名称的不同而异.
		1) settings.py：这个文件中包括了项目的初始化设置，可以针对整个项目进行有关参数配置，比如配置数据库、添加应用等。
		2) urls.py：这是一个URL 配置表文件，主要是将URL 映射到应用程序上。当用户请求某个url时， Django 项目会根据这个文件中的映射关系指向某个目标对象，该对象可以是某个应用中的urls.py 文件，也可以是某个具体的视图函数。在Django 中，这个文件也被称为URLconf.
		3) wsgi.py: WSGI 是Web Server Gateway Interface 的缩写
	3. blog 是在项目中所创建的应用之一，注意是之一，用创建应用的指令还可以创建很多其他的应用。
		1) admin.py：在这个文件中，可以自定义Django 管理工具，比如设置在管理界面能够管理的项目，或者通过重新自定义与系统管理有关的类对象，向管理功能增加新的内容。
		2) apps.py：这个文件是眨jangol.10 之后增加的，通常包含对应用的配置，比如为管理功能提供一个适合的应用名称。
		3) migrations：这是一个目录，用于存储应用的数据库表结构的指令，通过这些指令可以修改和创建数据库，从而在models.py 模型类和数据库表之间迁移。
		4) models.py：这是应用的数据模型，每个问ango 应用都应当有一个models.py 文件.		        			           
                 5) views.py   这是一个重要的文件，用户保存响应各种请求的函数或者类。如果编写的是函数，则称之为基于函数的视图：如果编写的是类，则称之为基于类的视图。views.py就是保存函数或者类的视图文件。
	4. templates 存放静态的HTML文件
	5. static 存放js,css等文件
	6. db.sqlite3 默认的数据库

1.1.5 网站的配置
	在Django 项目中，主管信息注册（对本项目进行各种信息声明〉的文件是./mysite/settings.py.
	BASE_DIR: os.path.dirname(os.path.dirname(os.path.abspath(file)))，这里BASE_DIR也就是整个工程project的目录，即djangotest这个目录
	DEBUG ：其值为True 或者False 。在开发过程中， 需要设置成True ，在测试功能时，Django 能够显示详细的报错信息一一这是"开发模式"。如果将项目部署到真正要对外发布的服务器上，我们称之为"生产环境",必须将其值修改为False ，从而避免暴露项目的内部信息。
	ALLOWED_HOSTS ：在DEBUG 为True 时，其值可以为空。当部署到生产环境中时，要把主域名填写到这里，才能通过域名访问到本网站。
	时STALLED_APPS ：这是一个非常重要的配置项，所有的应用只有写到这里才能生效。新增加的blog 'blog.apps.BlogConfig'
	DATABASES ：在这里可以配置数据库。
	DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 连接的数据库类型
        'HOST': '127.0.0.1',  # 连接数据库的地址
        'PORT': 3306,  # 端口
        'NAME': "day61",  # 数据库名称
        'USER': 'root',  # 用户
        'PASSWORD': '123456'  # 密码
			}
	}
	LANGUAGE CODE ：设置项目的语言， 一般情况下可以不用修改.如果要使用汉语，则设置zh-hans
	TIME_ZONE ：设置时区，通常使用东八区，设置为“ Asia/Shanghai ”。
	STATIC_URL = '/static/'# 静态文件夹的别名
	STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
	]
	# 静态文件夹的位置

1.1.6 知识点
	1. 开发模式：没有正式对外部客户提供服务，这种模式下很多配置都是为了开发而定的，比如在Djang开发模式中， 不需要配置A pache 或者Nginx 等服务器，也能够运行网站，这是因为Django 本身就提供了简单的Web 服务器功能。
	在开发模式中， Django 会自动检测到修改的代码并重新加载，不需要每次修改代码后重新启动Web 服务器。只有在新增加文件后，才需要重启Django 服务。运行Django服务的指令是python manage.py runserver.
	Django 安装好之后，就有了django-admin 这个默认命令，可以用diango-admin startprproject projectname 命令创建一个Django 项目。项目是由若干个“应用(app) 组成的， 实现具体功能。创建应用可以使用python manag.py startapp appname 命令，也可以使用django-amdin startapp appname 命令。每个应用都要在项目的settings.py 丈件的INSTALLED_APPS 中进行声明，告诉Djang 。这个应用是本项目的一部分。
	
1.2 编写博客的数据模型类（ORM）
	在Django 中，我们不需要通过SQL 语句直接跟数据库打交道，而是完全用Python 的方式创建数据模型，之后交给Django 完成数据库的操作。
1.2.1 数据模型类
	利用Django 开发网站系统， 一般情况下，要先编写数据模型，就是在./blog/models.py 中写一个类，这个类与数据库中的数据表具有对应关系。
	在mysite/__init__.py文件中导入pymysql,告诉Django用pymysql来代替默认的MySQLdb
	import pymysql
	pymysql.install_as_MySQLdb()
	在./blog/models.py 中编写博客的数据模型Blog ，本质上它是一个继承了django.db.models.Model的类。
	
	from django.db import models
	from django.utils import timezone
	from django.contrib.auth.models import User
	class BlogArticles(models.Model):
		title = models.CharField(Max_length=300)
		autho ＝ models.ForeignKey(Use,related_name="blog_posts") #ForeignKey（） 就反映了这种“ 一对多” 关系,类User 就是BlogA口icles 的对应对象，related_ name＝”blog_posts”的作用是允许通过类User反向查询到BlogArticles .
		body = models.TextField()
		publish = models.DateTimeField(default=timezone.now)
	class Meta:
		ordering = ("-publish",) #通过ordering =（”publish”，）规定了BlogArticles 实例对象的显示顺序，即按照publish 字段值的倒序显示。
	def __str__(self): #__str__是Django的一个内置方法。str一般是用于说明类的说明，或者定义自己想要的输出结果。
		return self.title
		
在/mysite/manage.py 位置执行
python manage.py makemigrations #- Create model BlogArticles,python manage.py sqlmigrate blog 0001,为SQL语句
python manage.py migrate #创建数据表
	
1.2.2 发布博客文章
	创建超级管理员：python manage.py createsuperuser  #admin  paic1234
	然后运行服务器: python manage.py runserver
	在浏览器的地址栏中输入http://127.0.0.1:8000/admin/,出现Django administration界面
	要发布博客文章：编辑的./blog/admin.py文件
	from django.contrib import admin
	from .models import BlogArticles
	admin.site.register(BlogArticles)  #将BlogArticles 类引入到当前环境，然后通过代码将该类注册到admin中。
	刷新页面,这时可以看到新注册的BLOG。单击Blog articles 右侧的“ Add ”按钮可以添加博客文章


urlpatterns = [
    url(r"^$", views.blog_title, name="blog_title"),
    url(r'(?P<article_id>\d)/$', views.blog_article, name="blog_article"),
]
article_id ，这个参数的目的是获得url中每篇博客文章的id ,，例如http://127.0.0.1/blog/1/ 。因此，使用
r'(?P<article_id>\d)/$'这种方式， 得到该请求的id数值并赋值给参数article_id,并传给后端处理的函数。
from django.shortcuts import render, get_object_or_404
def blog_article(request, article_id):
	#rticle = BlogArticles.objects.get(id=article_id)
	article = get_object_or_404(BlogArticles, id=article_id)
	pub = article.publish
	return render(request, "blog/content.html", {"article":article, "publish":pub })


get()是一条记录，一个实例对象
all(),filter()是一个序列对象，称为queryset
	
	
	
	
	
	
	
	
	