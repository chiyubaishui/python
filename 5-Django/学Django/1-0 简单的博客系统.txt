
	
1.2 编写博客的数据模型类（ORM）
	在Django 中，我们不需要通过SQL 语句直接跟数据库打交道，而是完全用Python 的方式创建数据模型，之后交给Django 完成数据库的操作。
	ORM的对应关系:
		类          --->      数据表
		对象        --->      数据行
		属性        --->      字段
1.2.1 数据模型类
	利用Django 开发网站系统， 一般情况下，要先编写数据模型，就是在./blog/models.py 中写一个类，这个类与数据库中的数据表具有对应关系。
	在mysite/__init__.py文件中导入pymysql,告诉Django用pymysql来代替默认的MySQLdb
	import pymysql
	pymysql.install_as_MySQLdb()
	在./blog/models.py 中编写博客的数据模型Blog ，本质上它是一个继承了django.db.models.Model的类。
	
	from django.db import models
	from django.utils import timezone
	from django.contrib.auth.models import User
	class BlogArticles(models.Model):
		title = models.CharField(Max_length=300)
		autho ＝ models.ForeignKey(Use,related_name="blog_posts") #ForeignKey（） 就反映了这种“ 一对多” 关系,类User 就是BlogA口icles 的对应对象，related_ name＝”blog_posts”的作用是允许通过类User反向查询到BlogArticles .
		body = models.TextField()
		publish = models.DateTimeField(default=timezone.now)
	class Meta:
		ordering = ("-publish",) #通过ordering =（”publish”，）规定了BlogArticles 实例对象的显示顺序，即按照publish 字段值的倒序显示。
	def __str__(self): #__str__是Django的一个内置方法。str一般是用于说明类的说明，或者定义自己想要的输出结果。
		return self.title
		
在/mysite/manage.py 位置执行
python manage.py makemigrations #- Create model BlogArticles,python manage.py sqlmigrate blog 0001,为SQL语句
python manage.py migrate #创建数据表
	
1.2.2 发布博客文章
	创建超级管理员：python manage.py createsuperuser  #admin  paic1234
	然后运行服务器: python manage.py runserver
	在浏览器的地址栏中输入http://127.0.0.1:8000/admin/,出现Django administration界面
	要发布博客文章：编辑的./blog/admin.py文件
	from django.contrib import admin
	from .models import BlogArticles
	admin.site.register(BlogArticles)  #将BlogArticles 类引入到当前环境，然后通过代码将该类注册到admin中。
	刷新页面,这时可以看到新注册的BLOG。单击Blog articles 右侧的“ Add ”按钮可以添加博客文章


urlpatterns = [
    url(r"^$", views.blog_title, name="blog_title"),
    url(r'(?P<article_id>\d)/$', views.blog_article, name="blog_article"),
]
article_id ，这个参数的目的是获得url中每篇博客文章的id ,，例如http://127.0.0.1/blog/1/ 。因此，使用
r'(?P<article_id>\d)/$'这种方式， 得到该请求的id数值并赋值给参数article_id,并传给后端处理的函数。
from django.shortcuts import render, get_object_or_404
def blog_article(request, article_id):
	#rticle = BlogArticles.objects.get(id=article_id)
	article = get_object_or_404(BlogArticles, id=article_id)
	pub = article.publish
	return render(request, "blog/content.html", {"article":article, "publish":pub })


get()是一条记录，一个实例对象
all(),filter()是一个序列对象，称为queryset
	
	
	
	
	
	
	
	
	